import os
import hashlib
import subprocess
import platform
import psutil

def calculate_hash(file_path):
    """Calculate the SHA-256 hash of a file."""
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        print(f"Error calculating hash for {file_path}: {e}")
        return None

def check_running_processes():
    """Check for suspicious running processes."""
    print("Checking running processes...")
    suspicious_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
        try:
            process_info = proc.info
            pid = process_info['pid']
            name = process_info['name']
            exe = process_info['exe']
            cmdline = process_info['cmdline']

            # Safely handle cmdline
            if isinstance(cmdline, list):
                cmdline = ' '.join(cmdline)
            else:
                cmdline = ""

            print(f"PID: {pid}, Name: {name}, Executable: {exe}, Command Line: {cmdline}")

            # Example of checking for suspicious process names (can be extended)
            if name.lower() in ['unknown.exe', 'suspicious.exe']:  # Add more known suspicious process names
                suspicious_processes.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    if suspicious_processes:
        print("\nSuspicious processes found:")
        for proc in suspicious_processes:
            print(proc)
    else:
        print("No suspicious processes found.")

def scan_directories_for_malware(directories):
    """Scan directories for files with suspicious hashes."""
    print("Scanning directories for malicious files...")
    known_malicious_hashes = {
        # Add known malicious SHA-256 hashes here
        "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855": "Malware Example"
    }
    suspicious_files = []

    for directory in directories:
        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                file_hash = calculate_hash(file_path)
                if file_hash in known_malicious_hashes:
                    print(f"Suspicious file found: {file_path}")
                    suspicious_files.append((file_path, known_malicious_hashes[file_hash]))

    if suspicious_files:
        print("\nSuspicious files found:")
        for file_path, malware_name in suspicious_files:
            print(f"File: {file_path}, Detected as: {malware_name}")
    else:
        print("No suspicious files found.")

def check_autoruns():
    """Check for suspicious autorun entries (Windows-specific)."""
    print("Checking autorun entries...")
    if platform.system() == "Windows":
        autorun_entries = subprocess.run(
            ["powershell", "-Command", "Get-CimInstance Win32_StartupCommand"],
            capture_output=True, text=True
        )
        print(autorun_entries.stdout)
    else:
        print("Autorun check is only available on Windows.")

def scan_with_builtin_av():
    """Scan with built-in antivirus (if available)."""
    print("Scanning with built-in antivirus...")
    if platform.system() == "Windows":
        subprocess.run(["powershell", "-Command", "Start-MpScan -ScanType FullScan"], check=True)
    elif platform.system() == "Linux":
        if subprocess.run(["which", "clamscan"], stdout=subprocess.PIPE).returncode == 0:
            subprocess.run(["clamscan", "-r", "/"], check=True)
        else:
            print("ClamAV is not installed. Please install ClamAV to scan for viruses.")
    else:
        print("Built-in AV scan is not supported on this OS.")

def main():
    # Define directories to scan
    directories_to_scan = [
        "/",  # Root directory (use with caution)
        "C:\\",  # Windows root directory
        os.path.expanduser("~/Downloads"),  # User's Downloads folder
        os.path.expanduser("~")  # User's home directory
    ]

    check_running_processes()
    scan_directories_for_malware(directories_to_scan)
    check_autoruns()
    scan_with_builtin_av()

if __name__ == "__main__":
    main()
